AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Cloud-based file storage (Day 1 + Day 2: Cognito auth & role groups, Day 3: list files)"

Parameters:
  StageName:
    Type: String
    Default: prod
    Description: API stage name

Globals:
  Function:
    Runtime: python3.13
    Timeout: 10
    MemorySize: 256
    Architectures: [x86_64]
    Tracing: Active
    Environment:
      Variables:
        BUCKET_NAME: !Ref FilesBucket
        PRESIGN_TTL_SECONDS: 900

Resources:

  ########################################
  # API Gateway (secured by Cognito)
  ########################################
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization

  ########################################
  # S3 bucket for file storage
  ########################################
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ########################################
  # DynamoDB tables (metadata + history)
  ########################################
  FilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: fileId
          AttributeType: S
      KeySchema:
        - AttributeName: fileId
          KeyType: HASH

  DownloadHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: downloadId
          AttributeType: S
      KeySchema:
        - AttributeName: downloadId
          KeyType: HASH

  ########################################
  # Cognito (User Pool + Client + Groups)
  ########################################
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CloudFileStoreUserPool
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: cloud-file-store-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders: [COGNITO]

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      UserPoolId: !Ref UserPool
      Description: Admins can upload/download/delete

  UploaderGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: uploader
      UserPoolId: !Ref UserPool
      Description: Upload & download

  ViewerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: viewer
      UserPoolId: !Ref UserPool
      Description: Download only

  ########################################
  # Lambda: presign upload (POST /files/presign-upload)
  ########################################
  PresignUploadFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/presign_upload/
      Handler: app.handler
      Description: Generate presigned S3 PUT URL + save metadata in DynamoDB
      Environment:
        Variables:
          BUCKET_NAME: !Ref FilesBucket
          PRESIGN_TTL_SECONDS: 900
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /files/presign-upload
            Method: POST
      Policies:
        # ✅ Allow Lambda to write files to S3
        - S3CrudPolicy:
            BucketName: !Ref FilesBucket

        # ✅ Allow Lambda to write metadata into DynamoDB
        - DynamoDBCrudPolicy:
            TableName: !Ref FilesTable

        # ✅ Always include CloudWatch logs
        - AWSLambdaBasicExecutionRole


  ########################################
  # Lambda: presign download (GET /files/presign-download)
  ########################################
  PresignDownloadFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/presign_download/
      Handler: app.handler
      Description: Generate presigned S3 GET URL
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /files/presign-download
            Method: GET
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref FilesBucket
        - AWSLambdaBasicExecutionRole

  ########################################
  # Lambda: list files (Day 3)
  ########################################
  ListFilesFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list_files/
      Handler: app.handler
      Description: List files in bucket
      Environment:
        Variables:
          FILES_BUCKET: !Ref FilesBucket
          FILES_TABLE_NAME: !Ref FilesTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /files/list
            Method: GET
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref FilesBucket
        - DynamoDBReadPolicy:
            TableName: !Ref FilesTable
        - AWSLambdaBasicExecutionRole

  ########################################
  # Lambda: record download (Day 4)
  ########################################
  RecordDownloadFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/record_download/
      Handler: app.handler
      Description: Record a file download into DownloadHistoryTable
      Environment:
        Variables:
          HISTORY_TABLE_NAME: !Ref DownloadHistoryTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /files/record-download
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DownloadHistoryTable
        - AWSLambdaBasicExecutionRole


Outputs:
  ApiUrl:
    Description: Base URL for API Gateway stage
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
  BucketName:
    Description: S3 bucket for files
    Value: !Ref FilesBucket
  FilesTableName:
    Description: DynamoDB table for file metadata
    Value: !Ref FilesTable
  HistoryTableName:
    Description: DynamoDB table for download history
    Value: !Ref DownloadHistoryTable
  UserPoolId:
    Description: Cognito User Pool Id
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito App Client Id
    Value: !Ref UserPoolClient
